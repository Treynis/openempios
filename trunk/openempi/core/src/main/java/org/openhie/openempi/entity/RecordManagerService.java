/**
 *
 * Copyright (C) 2002-2012 "SYSNET International, Inc."
 * support@sysnetint.com [http://www.sysnetint.com]
 *
 * This file is part of OpenEMPI.
 *
 * OpenEMPI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.openhie.openempi.entity;

import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.openhie.openempi.ApplicationException;
import org.openhie.openempi.InitializationException;
import org.openhie.openempi.model.DataAccessIntent;
import org.openhie.openempi.model.Entity;
import org.openhie.openempi.model.RecordLink;
import org.openhie.openempi.model.Identifier;
import org.openhie.openempi.model.Record;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;


public interface RecordManagerService
{
	public void initializeStore(Entity entity) throws InitializationException;
	public void shutdownStore(Entity entity);

	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public Record addRecord(Entity entity, Record record) throws ApplicationException;

    @Transactional(propagation=Propagation.REQUIRED, readOnly=false)
    public Set<Record> addRecords(Entity entity, Collection<Record> records) throws ApplicationException;

	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public Record importRecord(Entity entity, Record record) throws ApplicationException;

    @Transactional(propagation=Propagation.REQUIRED, readOnly=false)
    public Set<Record> importRecords(Entity entity, Collection<Record> records) throws ApplicationException;

    @Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public Record updateRecord(Entity entity, Record record) throws ApplicationException;

	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public Record deleteRecord(Entity entity, Record record) throws ApplicationException;

	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public List<Record> deleteRecordByIdentifier(Entity entity, Identifier identifier) throws ApplicationException;

	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public Record removeRecord(Entity entity, Record record) throws ApplicationException;

	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
    public void mergeRecords(Entity entity, Identifier retiredIdentifier, Identifier survivingIdentifier)
            throws ApplicationException;
	
	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public RecordLink addRecordLink(RecordLink link) throws ApplicationException;

	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public RecordLink updateRecordLink(RecordLink link) throws ApplicationException;

    @Transactional(propagation=Propagation.REQUIRED, readOnly=false)
    public void removeRecordLink(RecordLink link) throws ApplicationException;

	/**
	 * This method invokes the underlying matching algorithm of the system and requests that
	 * all associations between records that point to the same physical entity should
	 * be deleted and new ones should be defined again from scratch. This operation is time
	 * consuming since it will cause the matching algorithm to attempt to match all the
	 * record pairs in the repository.
	 */
	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public void linkAllRecordPairs(Entity entity) throws ApplicationException;

	/**
	 * This method performs the same process as the linkAllRecordPairs method but
	 * it first removes all the record pairs it may have previously created.
	 */
	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public void initializeRepository(Entity entity) throws ApplicationException;

	/**
	 * This method removes all the links in the repository that have been generated by
	 * the current matching algorithm. This is usually done before applying a new matching
	 * algorithm configuration to the matching algorithm and before running the matching
	 * algorithm using the new settings against the entire repository.
	 *
	 */
	@Transactional(propagation=Propagation.REQUIRED, readOnly=false)
	public void clearAllLinks(Entity entity);

	/**
	 * This method iterates over all records in the repository and generates the custom
	 * fields that have been defined in the configuration file.
	 */
	public void generateCustomFields(Entity entity) throws ApplicationException;

	public void declareIntent(Entity entity, DataAccessIntent intent);
	
	public boolean assignGlobalIdentifier(Entity entity) throws ApplicationException;	
}
